C51 COMPILER V9.55   OLED                                                                  05/20/2024 14:55:21 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN .\Objects\oled.obj
COMPILER INVOKED BY: D:\Ange_Y\C51\C51 keil\C51\BIN\C51.EXE oled.c OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\Listings\
                    -oled.lst) OBJECT(.\Objects\oled.obj)

line level    source

   1          #include "oled.h"
   2          
   3          void delay(unsigned int z)
   4          {
   5   1              unsigned int i,j;
   6   1              for(i=z;i>0;i--)
   7   1              for(j=114;j>0;j--);
   8   1      }
   9           
  10          /* 发送指令函数 */
  11          void write_cmd(cmd)
  12          {
  13   1              IIC_Start();
  14   1              IIC_SendByte(0x78);
  15   1              IIC_WaitAck();
  16   1              IIC_SendByte(0x00);
  17   1              IIC_WaitAck();
  18   1              IIC_SendByte(cmd);
  19   1              IIC_WaitAck();
  20   1              IIC_Stop();
  21   1      }
  22          /* 发送数据函数 */
  23          void write_dat(dat)
  24          {
  25   1              IIC_Start();
  26   1              IIC_SendByte(0x78);
  27   1              IIC_WaitAck();
  28   1              IIC_SendByte(0x40);
  29   1              IIC_WaitAck();
  30   1              IIC_SendByte(dat);
  31   1              IIC_WaitAck();
  32   1              IIC_Stop();
  33   1      }
  34           
  35          //坐标设置
  36          void Set_add(unsigned char x, unsigned char y) //x表示列（0~127），y表示页（0~7）
  37          {       
  38   1              write_cmd(0xb0+y);                        //设置页地址（0~7）
  39   1              write_cmd(((x&0xf0)>>4)|0x10);             //设置显示位置―列高地址
  40   1              write_cmd((x&0x0f));                        //设置显示位置―列低地址
  41   1      }   
  42           
  43          /*********************OLED初始化************************************/
  44          void OLED_Init(void)
  45          {
  46   1              delay(500);//初始化之前的延时很重要！
  47   1              write_cmd(0xae);//--turn off oled panel
  48   1              write_cmd(0x00);//---set low column address
  49   1              write_cmd(0x10);//---set high column address
  50   1              write_cmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
  51   1              write_cmd(0x81);//--set contrast control register
  52   1              write_cmd(0xcf); // Set SEG Output Current Brightness
  53   1              write_cmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
  54   1              write_cmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
C51 COMPILER V9.55   OLED                                                                  05/20/2024 14:55:21 PAGE 2   

  55   1              write_cmd(0xa6);//--set normal display
  56   1              write_cmd(0xa8);//--set multiplex ratio(1 to 64)
  57   1              write_cmd(0x3f);//--1/64 duty
  58   1              write_cmd(0xd3);//-set display offset   Shift Mapping RAM Counter (0x00~0x3F)
  59   1              write_cmd(0x00);//-not offset
  60   1              write_cmd(0xd5);//--set display clock divide ratio/oscillator frequency
  61   1              write_cmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
  62   1              write_cmd(0xd9);//--set pre-charge period
  63   1              write_cmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
  64   1              write_cmd(0xda);//--set com pins hardware configuration
  65   1              write_cmd(0x12);
  66   1              write_cmd(0xdb);//--set vcomh
  67   1              write_cmd(0x40);//Set VCOM Deselect Level
  68   1              write_cmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
  69   1              write_cmd(0x02);//
  70   1              write_cmd(0x8d);//--set Charge Pump enable/disable
  71   1              write_cmd(0x14);//--set(0x10) disable
  72   1              write_cmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
  73   1              write_cmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
  74   1              write_cmd(0xaf);//--turn on oled panel
  75   1              write_cmd(0x00); //初始清屏
  76   1              Set_add(0,0);
  77   1      } 
  78           
  79           
  80          //清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!
  81          //先选中页，初始位置，然后128列全部清零
  82          void OLED_Clear(void)  
  83          {  
  84   1              unsigned int i,n;                   
  85   1              for(i=0;i<8;i++)  
  86   1              {  
  87   2                      write_cmd (0xb0+i); //选中页地址（0~7）
  88   2                      write_cmd (0x00);   //选中显示位置―列低地址
  89   2                      write_cmd (0x10);   //选中显示位置―列高地址   
  90   2                      for(n=0;n<128;n++)  //选中所有像素点
  91   2                          write_dat(0);   //关闭像素点
  92   2              } //更新显示
  93   1      }
  94          
  95           
  96          //图片显示函数，显示BMP图片128×64起始点坐标
  97           
  98          /*  x0、x1:显示数据的列位置；
  99                x0：数据的初始位置          刚开始在哪一列打印出来
 100                                  x1：数据的最后的位置        在哪一列打印结束
 101                          y0、y1：显示的页位置
 102                            y0：数据的初始页位置（行）；刚开始在哪一行打印出来
 103                                  y1:数据的最后的位置（行）   在哪一行打印结束
 104           
 105                          BMP[]:需要打印的数据
 106          */
 107          void Xianshi_Tupian(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BM
             -P[])
 108          {       
 109   1       unsigned int j=0;
 110   1       unsigned char x,y;
 111   1        
 112   1        if(y1%8==0) 
 113   1                      y=y1/8;      
 114   1        else 
 115   1                      y=y1/8+1;
C51 COMPILER V9.55   OLED                                                                  05/20/2024 14:55:21 PAGE 3   

 116   1              for(y=y0;y<y1;y++)
 117   1              {
 118   2                              Set_add(x0,y);
 119   2                              for(x=x0;x<x1;x++)
 120   2                              {      
 121   3                                              write_dat(BMP[j++]);            
 122   3                              }
 123   2              }
 124   1      }
 125           
 126          //打印T=
 127           void Xianshi_32X32(unsigned char x, y)
 128          {
 129   1              unsigned char c=0,i=0,j=0;
 130   1              while (j<2)
 131   1              {
 132   2                      if(x>120){x=0;y+=4;}            
 133   2                      for(c=0;c<8;c++){               
 134   3                      Set_add(x,y+c);     //一共两页，第一页
 135   3                      for(i=0;i<16;i++)
 136   3                      write_dat(F32X32[j][i+c*16]);
 137   3                      }               
 138   2                      x+=16;
 139   2                      j++;
 140   2              }
 141   1      }
 142          
 143           void Xianshi_16X16(unsigned char x, y,unsigned char ch[])
 144          {
 145   1              unsigned char c=0,i=0,j=0;
 146   1              while (ch[j]!='\0')
 147   1              {
 148   2                      c =ch[j]-32;
 149   2                      if(x>120){x=0;y+=4;}
 150   2                      
 151   2                      Set_add(x,y);     //一共两页，第一页
 152   2                      for(i=0;i<8;i++)
 153   2                      write_dat(F16X16[c][i]);
 154   2                       
 155   2                      Set_add(x,y+1);   //一共两页，第二页
 156   2                      for(i=0;i<8;i++)     
 157   2                      write_dat(F16X16[c][i+8]);
 158   2                      
 159   2                      x+=8;
 160   2                      j++;
 161   2              }
 162   1      }
 163           void Xianshi_24X24(unsigned char x, y,unsigned char ch[])
 164          {
 165   1              unsigned char c=0,i=0,j=0;
 166   1              while (ch[j]!='\0')
 167   1              {
 168   2                      c =ch[j]-32;
 169   2                      if(x>120){x=0;y+=4;}
 170   2                      
 171   2                      Set_add(x,y);     //一共两页，第一页
 172   2                      for(i=0;i<12;i++)
 173   2                      write_dat(F24X24[c][i]);
 174   2                       
 175   2                      Set_add(x,y+1);   //一共两页，第二页
 176   2                      for(i=0;i<12;i++)     
 177   2                      write_dat(F24X24[c][i+12]);
C51 COMPILER V9.55   OLED                                                                  05/20/2024 14:55:21 PAGE 4   

 178   2                      
 179   2                      Set_add(x,y+2);   //一共两页，第二页
 180   2                      for(i=0;i<12;i++)     
 181   2                      write_dat(F24X24[c][i+24]);             
 182   2                      
 183   2                      x+=12;
 184   2                      j++;
 185   2              }
 186   1      }
 187          /* 6X8显示 */
 188          //可以自己找出来数据对应的数组
 189          /***************功能描述：显示6*8一组标准ASCII字符串    显示的坐标（x,y），y为页范围0～7****************/
 190          void Xianshi_6X8(unsigned char x, y,unsigned char ch[])
 191          {
 192   1              unsigned char c=0,i=0,j=0;
 193   1              while (ch[j]!='\0')
 194   1              {
 195   2                      c =ch[j]-32;
 196   2                      if(x>126){x=0;y++;}
 197   2                      
 198   2                      Set_add(x,y);
 199   2                      for(i=0;i<6;i++)
 200   2                      write_dat(F6x8[c][i]);
 201   2                      x+=6;
 202   2                      j++;
 203   2              }
 204   1      }
 205           
 206          /* 8X16显示 */
 207          //可以自己找出来数据对应的数组
 208          /*******************功能描述：显示8*16一组标准ASCII字符串        显示的坐标（x,y），y为页范围0～7***************
             -*/
 209          //ch[]:想要输入的数据，会自动在F8X16[]中寻找出来并发送给OLED
 210          void Xianshi_8X16(unsigned char x, y,unsigned char ch[])
 211          {
 212   1              unsigned char c=0,i=0,j=0;
 213   1              while (ch[j]!='\0')
 214   1              {
 215   2                      c =ch[j]-32;
 216   2                      if(x>120){x=0;y++;}
 217   2                      
 218   2                      Set_add(x,y);     //一共两页，第一页
 219   2                      for(i=0;i<8;i++)
 220   2                      write_dat(F8X16[c*16+i]);
 221   2                       
 222   2                      Set_add(x,y+1);   //一共两页，第二页
 223   2                      for(i=0;i<8;i++)     
 224   2                      write_dat(F8X16[c*16+i+8]);
 225   2                      
 226   2                      x+=8;
 227   2                      j++;
 228   2              }
 229   1      }
 230          
 231          void DS18B20_ShowTemp(unsigned char x, y,float f_temp){
 232   1              int d_temp;     
 233   1              unsigned char a[4],i,j=0,c;
 234   1              if(f_temp<0)  //打印负号 -
 235   1              {
 236   2                      for(c=0;c<8;c++){               
 237   3                              Set_add(x,y+c);     //一共两页，第一页
 238   3                              for(i=0;i<16;i++)
C51 COMPILER V9.55   OLED                                                                  05/20/2024 14:55:21 PAGE 5   

 239   3                                      write_dat(F32X32[2][i+c*16]);
 240   3                      }
 241   2              }
 242   1              else //清楚 - 号
 243   1              {
 244   2                      for(c=0;c<8;c++){               
 245   3                              Set_add(x,y+c);     //一共两页，第一页
 246   3                              for(i=0;i<16;i++)
 247   3                                      write_dat(F32X32[18][i+c*16]);
 248   3                      }
 249   2              }
 250   1              x+=16;
 251   1              
 252   1              d_temp = (int)(fabs(f_temp) * 10); //四舍五入，取一位小数
 253   1      //      d_temp = 236;
 254   1              a[0] =(d_temp / 100) + 5;               //打印温度十位
 255   1              a[1] =(d_temp / 10 % 10) + 5;   //打印温度个位
 256   1              a[2] = 4;                                               //打印小数点 '.'
 257   1              a[3] =(d_temp % 10) + 5;                //打印温度十分位
 258   1      
 259   1              if(a[0]==5)
 260   1              {
 261   2                      for(c=0;c<8;c++){               
 262   3                              Set_add(x,y+c);     //一共两页，第一页
 263   3                              for(i=0;i<16;i++)
 264   3                                      write_dat(~(F32X32[a[18]][i+c*16]));
 265   3                      }
 266   2                      x+=16;
 267   2                      j++;
 268   2              }
 269   1              while (j<4)
 270   1              {
 271   2                      
 272   2                      if(x>120){x=0;y++;}
 273   2      
 274   2                      for(c=0;c<8;c++){               
 275   3                              Set_add(x,y+c);     //一共两页，第一页
 276   3                              for(i=0;i<16;i++)
 277   3                                      write_dat(F32X32[a[j]][i+c*16]);
 278   3                      }
 279   2                      
 280   2                      x+=16;
 281   2                      j++;
 282   2              }
 283   1              for(c=0;c<8;c++){               
 284   2                              Set_add(x,y+c);     //一共两页，第一页
 285   2                              for(i=0;i<16;i++)
 286   2                                      write_dat(F32X32[17][i+c*16]);
 287   2                      }       
 288   1              x+=16;  
 289   1              for(c=0;c<8;c++){               
 290   2                              Set_add(x,y+c);     //一共两页，第一页
 291   2                              for(i=0;i<16;i++)
 292   2                                      write_dat(F32X32[16][i+c*16]);
 293   2                      }
 294   1      }
 295          
 296          
 297          
 298          
 299          
 300          
C51 COMPILER V9.55   OLED                                                                  05/20/2024 14:55:21 PAGE 6   

 301          
 302          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1836    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      76
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
